class Nodo {
  constructor(valor) {
    this.valor = valor;
    this.siguiente = null;
  }
}

class ListaSimple {
  constructor() {
    this.cabeza = null;
  }

  // 1Ô∏è‚É£ Inserci√≥n al inicio ‚Äì O(1)
  insertarInicio(valor) {
    const nuevo = new Nodo(valor);
    nuevo.siguiente = this.cabeza;
    this.cabeza = nuevo;
  }

  // 2Ô∏è‚É£ Inserci√≥n al final ‚Äì O(n)
  insertarFinal(valor) {
    const nuevo = new Nodo(valor);
    if (!this.cabeza) {
      this.cabeza = nuevo;
    } else {
      let actual = this.cabeza;
      while (actual.siguiente) {
        actual = actual.siguiente;
      }
      actual.siguiente = nuevo;
    }
  }

  // 3Ô∏è‚É£ Inserci√≥n en posici√≥n espec√≠fica ‚Äì O(n)
  insertarEnPosicion(valor, posicion) {
    if (posicion < 0) return;

    const nuevo = new Nodo(valor);
    if (posicion === 0) {
      nuevo.siguiente = this.cabeza;
      this.cabeza = nuevo;
      return;
    }

    let actual = this.cabeza;
    let contador = 0;

    while (actual && contador < posicion - 1) {
      actual = actual.siguiente;
      contador++;
    }

    if (!actual) return;
    nuevo.siguiente = actual.siguiente;
    actual.siguiente = nuevo;
  }

  // 4Ô∏è‚É£ Eliminaci√≥n del primer nodo ‚Äì O(1)
  eliminarInicio() {
    if (this.cabeza) {
      this.cabeza = this.cabeza.siguiente;
    }
  }

  // 5Ô∏è‚É£ Eliminaci√≥n del √∫ltimo nodo ‚Äì O(n)
  eliminarFinal() {
    if (!this.cabeza) return;
    if (!this.cabeza.siguiente) {
      this.cabeza = null;
      return;
    }

    let actual = this.cabeza;
    while (actual.siguiente.siguiente) {
      actual = actual.siguiente;
    }
    actual.siguiente = null;
  }

  // 6Ô∏è‚É£ Eliminaci√≥n en posici√≥n espec√≠fica ‚Äì O(n)
  eliminarEnPosicion(posicion) {
    if (posicion < 0 || !this.cabeza) return;
    if (posicion === 0) {
      this.eliminarInicio();
      return;
    }

    let actual = this.cabeza;
    let contador = 0;

    while (actual.siguiente && contador < posicion - 1) {
      actual = actual.siguiente;
      contador++;
    }

    if (!actual.siguiente) return;
    actual.siguiente = actual.siguiente.siguiente;
  }
}
const { performance } = require("perf_hooks");

function medirOperacion(nombre, operacion, repeticiones) {
  const lista = new ListaSimple();
  const inicio = performance.now();

  for (let i = 0; i < repeticiones; i++) {
    operacion(lista, i);
  }

  const fin = performance.now();
  console.log(`‚è±Ô∏è ${nombre} (${repeticiones} nodos): ${(fin - inicio).toFixed(2)} ms`);
}

// üîπ Medir inserci√≥n al inicio (O(1))
medirOperacion("Inserci√≥n al inicio", (lista, i) => lista.insertarInicio(i), 1000);
medirOperacion("Inserci√≥n al inicio", (lista, i) => lista.insertarInicio(i), 10000);
medirOperacion("Inserci√≥n al inicio", (lista, i) => lista.insertarInicio(i), 100000);

// üî∏ Medir inserci√≥n al final (O(n))
medirOperacion("Inserci√≥n al final", (lista, i) => lista.insertarFinal(i), 1000);
medirOperacion("Inserci√≥n al final", (lista, i) => lista.insertarFinal(i), 10000);
medirOperacion("Inserci√≥n al final", (lista, i) => lista.insertarFinal(i), 100000);
